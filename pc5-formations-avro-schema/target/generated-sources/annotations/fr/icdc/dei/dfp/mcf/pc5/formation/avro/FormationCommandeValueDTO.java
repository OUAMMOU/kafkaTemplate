/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.icdc.dei.dfp.mcf.pc5.formation.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FormationCommandeValueDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7352514133691490277L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FormationCommandeValueDTO\",\"namespace\":\"fr.icdc.dei.dfp.mcf.pc5.formation.avro\",\"fields\":[{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"source de la commande\"},{\"name\":\"nom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Nom de la formation\"},{\"name\":\"dateDebut\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"},\"doc\":\"Date début\"},{\"name\":\"dateFin\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"},\"doc\":\"Date de fin\"},{\"name\":\"bcrTitulaire\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"BCR titulaire\"},{\"name\":\"natureDeclarant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Nature du déclarant de la formation\",\"symbols\":[\"TITULAIRE\",\"EMPLOYEUR\",\"OF\"]},{\"name\":\"categorie\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Catégorie de la formation\",\"symbols\":[\"GENERIQUE\",\"SST\"]},{\"name\":\"numeroContratDeclarant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Numéro du contrat du Déclarant\"},{\"name\":\"fondsDeclarant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Fonds du contrat Déclarant\"},{\"name\":\"produitDeclarant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Produit du contrat Déclarant\",\"symbols\":[\"EMP\",\"OF\"]},{\"name\":\"numeroContratDelegant\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Numéro du contrat du Délégant\",\"default\":null},{\"name\":\"fondsDelegant\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Fonds du contrat Délégant\",\"default\":null},{\"name\":\"produitDelegant\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Produit du contrat Délégant\",\"default\":null,\"symbols\":[\"EMP\",\"OF\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<FormationCommandeValueDTO> ENCODER =
      new BinaryMessageEncoder<FormationCommandeValueDTO>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FormationCommandeValueDTO> DECODER =
      new BinaryMessageDecoder<FormationCommandeValueDTO>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FormationCommandeValueDTO> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FormationCommandeValueDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FormationCommandeValueDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FormationCommandeValueDTO>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FormationCommandeValueDTO to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FormationCommandeValueDTO from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FormationCommandeValueDTO instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FormationCommandeValueDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** source de la commande */
   private java.lang.String source;
  /** Nom de la formation */
   private java.lang.String nom;
  /** Date début */
   private java.time.LocalDate dateDebut;
  /** Date de fin */
   private java.time.LocalDate dateFin;
  /** BCR titulaire */
   private java.lang.String bcrTitulaire;
  /** Nature du déclarant de la formation */
   private java.lang.String natureDeclarant;
  /** Catégorie de la formation */
   private java.lang.String categorie;
  /** Numéro du contrat du Déclarant */
   private java.lang.String numeroContratDeclarant;
  /** Fonds du contrat Déclarant */
   private java.lang.String fondsDeclarant;
  /** Produit du contrat Déclarant */
   private java.lang.String produitDeclarant;
  /** Numéro du contrat du Délégant */
   private java.lang.String numeroContratDelegant;
  /** Fonds du contrat Délégant */
   private java.lang.String fondsDelegant;
  /** Produit du contrat Délégant */
   private java.lang.String produitDelegant;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FormationCommandeValueDTO() {}

  /**
   * All-args constructor.
   * @param source source de la commande
   * @param nom Nom de la formation
   * @param dateDebut Date début
   * @param dateFin Date de fin
   * @param bcrTitulaire BCR titulaire
   * @param natureDeclarant Nature du déclarant de la formation
   * @param categorie Catégorie de la formation
   * @param numeroContratDeclarant Numéro du contrat du Déclarant
   * @param fondsDeclarant Fonds du contrat Déclarant
   * @param produitDeclarant Produit du contrat Déclarant
   * @param numeroContratDelegant Numéro du contrat du Délégant
   * @param fondsDelegant Fonds du contrat Délégant
   * @param produitDelegant Produit du contrat Délégant
   */
  public FormationCommandeValueDTO(java.lang.String source, java.lang.String nom, java.time.LocalDate dateDebut, java.time.LocalDate dateFin, java.lang.String bcrTitulaire, java.lang.String natureDeclarant, java.lang.String categorie, java.lang.String numeroContratDeclarant, java.lang.String fondsDeclarant, java.lang.String produitDeclarant, java.lang.String numeroContratDelegant, java.lang.String fondsDelegant, java.lang.String produitDelegant) {
    this.source = source;
    this.nom = nom;
    this.dateDebut = dateDebut;
    this.dateFin = dateFin;
    this.bcrTitulaire = bcrTitulaire;
    this.natureDeclarant = natureDeclarant;
    this.categorie = categorie;
    this.numeroContratDeclarant = numeroContratDeclarant;
    this.fondsDeclarant = fondsDeclarant;
    this.produitDeclarant = produitDeclarant;
    this.numeroContratDelegant = numeroContratDelegant;
    this.fondsDelegant = fondsDelegant;
    this.produitDelegant = produitDelegant;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return source;
    case 1: return nom;
    case 2: return dateDebut;
    case 3: return dateFin;
    case 4: return bcrTitulaire;
    case 5: return natureDeclarant;
    case 6: return categorie;
    case 7: return numeroContratDeclarant;
    case 8: return fondsDeclarant;
    case 9: return produitDeclarant;
    case 10: return numeroContratDelegant;
    case 11: return fondsDelegant;
    case 12: return produitDelegant;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: source = value$ != null ? value$.toString() : null; break;
    case 1: nom = value$ != null ? value$.toString() : null; break;
    case 2: dateDebut = (java.time.LocalDate)value$; break;
    case 3: dateFin = (java.time.LocalDate)value$; break;
    case 4: bcrTitulaire = value$ != null ? value$.toString() : null; break;
    case 5: natureDeclarant = value$ != null ? value$.toString() : null; break;
    case 6: categorie = value$ != null ? value$.toString() : null; break;
    case 7: numeroContratDeclarant = value$ != null ? value$.toString() : null; break;
    case 8: fondsDeclarant = value$ != null ? value$.toString() : null; break;
    case 9: produitDeclarant = value$ != null ? value$.toString() : null; break;
    case 10: numeroContratDelegant = value$ != null ? value$.toString() : null; break;
    case 11: fondsDelegant = value$ != null ? value$.toString() : null; break;
    case 12: produitDelegant = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'source' field.
   * @return source de la commande
   */
  public java.lang.String getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * source de la commande
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'nom' field.
   * @return Nom de la formation
   */
  public java.lang.String getNom() {
    return nom;
  }


  /**
   * Sets the value of the 'nom' field.
   * Nom de la formation
   * @param value the value to set.
   */
  public void setNom(java.lang.String value) {
    this.nom = value;
  }

  /**
   * Gets the value of the 'dateDebut' field.
   * @return Date début
   */
  public java.time.LocalDate getDateDebut() {
    return dateDebut;
  }


  /**
   * Sets the value of the 'dateDebut' field.
   * Date début
   * @param value the value to set.
   */
  public void setDateDebut(java.time.LocalDate value) {
    this.dateDebut = value;
  }

  /**
   * Gets the value of the 'dateFin' field.
   * @return Date de fin
   */
  public java.time.LocalDate getDateFin() {
    return dateFin;
  }


  /**
   * Sets the value of the 'dateFin' field.
   * Date de fin
   * @param value the value to set.
   */
  public void setDateFin(java.time.LocalDate value) {
    this.dateFin = value;
  }

  /**
   * Gets the value of the 'bcrTitulaire' field.
   * @return BCR titulaire
   */
  public java.lang.String getBcrTitulaire() {
    return bcrTitulaire;
  }


  /**
   * Sets the value of the 'bcrTitulaire' field.
   * BCR titulaire
   * @param value the value to set.
   */
  public void setBcrTitulaire(java.lang.String value) {
    this.bcrTitulaire = value;
  }

  /**
   * Gets the value of the 'natureDeclarant' field.
   * @return Nature du déclarant de la formation
   */
  public java.lang.String getNatureDeclarant() {
    return natureDeclarant;
  }


  /**
   * Sets the value of the 'natureDeclarant' field.
   * Nature du déclarant de la formation
   * @param value the value to set.
   */
  public void setNatureDeclarant(java.lang.String value) {
    this.natureDeclarant = value;
  }

  /**
   * Gets the value of the 'categorie' field.
   * @return Catégorie de la formation
   */
  public java.lang.String getCategorie() {
    return categorie;
  }


  /**
   * Sets the value of the 'categorie' field.
   * Catégorie de la formation
   * @param value the value to set.
   */
  public void setCategorie(java.lang.String value) {
    this.categorie = value;
  }

  /**
   * Gets the value of the 'numeroContratDeclarant' field.
   * @return Numéro du contrat du Déclarant
   */
  public java.lang.String getNumeroContratDeclarant() {
    return numeroContratDeclarant;
  }


  /**
   * Sets the value of the 'numeroContratDeclarant' field.
   * Numéro du contrat du Déclarant
   * @param value the value to set.
   */
  public void setNumeroContratDeclarant(java.lang.String value) {
    this.numeroContratDeclarant = value;
  }

  /**
   * Gets the value of the 'fondsDeclarant' field.
   * @return Fonds du contrat Déclarant
   */
  public java.lang.String getFondsDeclarant() {
    return fondsDeclarant;
  }


  /**
   * Sets the value of the 'fondsDeclarant' field.
   * Fonds du contrat Déclarant
   * @param value the value to set.
   */
  public void setFondsDeclarant(java.lang.String value) {
    this.fondsDeclarant = value;
  }

  /**
   * Gets the value of the 'produitDeclarant' field.
   * @return Produit du contrat Déclarant
   */
  public java.lang.String getProduitDeclarant() {
    return produitDeclarant;
  }


  /**
   * Sets the value of the 'produitDeclarant' field.
   * Produit du contrat Déclarant
   * @param value the value to set.
   */
  public void setProduitDeclarant(java.lang.String value) {
    this.produitDeclarant = value;
  }

  /**
   * Gets the value of the 'numeroContratDelegant' field.
   * @return Numéro du contrat du Délégant
   */
  public java.lang.String getNumeroContratDelegant() {
    return numeroContratDelegant;
  }


  /**
   * Sets the value of the 'numeroContratDelegant' field.
   * Numéro du contrat du Délégant
   * @param value the value to set.
   */
  public void setNumeroContratDelegant(java.lang.String value) {
    this.numeroContratDelegant = value;
  }

  /**
   * Gets the value of the 'fondsDelegant' field.
   * @return Fonds du contrat Délégant
   */
  public java.lang.String getFondsDelegant() {
    return fondsDelegant;
  }


  /**
   * Sets the value of the 'fondsDelegant' field.
   * Fonds du contrat Délégant
   * @param value the value to set.
   */
  public void setFondsDelegant(java.lang.String value) {
    this.fondsDelegant = value;
  }

  /**
   * Gets the value of the 'produitDelegant' field.
   * @return Produit du contrat Délégant
   */
  public java.lang.String getProduitDelegant() {
    return produitDelegant;
  }


  /**
   * Sets the value of the 'produitDelegant' field.
   * Produit du contrat Délégant
   * @param value the value to set.
   */
  public void setProduitDelegant(java.lang.String value) {
    this.produitDelegant = value;
  }

  /**
   * Creates a new FormationCommandeValueDTO RecordBuilder.
   * @return A new FormationCommandeValueDTO RecordBuilder
   */
  public static fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder newBuilder() {
    return new fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder();
  }

  /**
   * Creates a new FormationCommandeValueDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FormationCommandeValueDTO RecordBuilder
   */
  public static fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder newBuilder(fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder other) {
    if (other == null) {
      return new fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder();
    } else {
      return new fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder(other);
    }
  }

  /**
   * Creates a new FormationCommandeValueDTO RecordBuilder by copying an existing FormationCommandeValueDTO instance.
   * @param other The existing instance to copy.
   * @return A new FormationCommandeValueDTO RecordBuilder
   */
  public static fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder newBuilder(fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO other) {
    if (other == null) {
      return new fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder();
    } else {
      return new fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder(other);
    }
  }

  /**
   * RecordBuilder for FormationCommandeValueDTO instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FormationCommandeValueDTO>
    implements org.apache.avro.data.RecordBuilder<FormationCommandeValueDTO> {

    /** source de la commande */
    private java.lang.String source;
    /** Nom de la formation */
    private java.lang.String nom;
    /** Date début */
    private java.time.LocalDate dateDebut;
    /** Date de fin */
    private java.time.LocalDate dateFin;
    /** BCR titulaire */
    private java.lang.String bcrTitulaire;
    /** Nature du déclarant de la formation */
    private java.lang.String natureDeclarant;
    /** Catégorie de la formation */
    private java.lang.String categorie;
    /** Numéro du contrat du Déclarant */
    private java.lang.String numeroContratDeclarant;
    /** Fonds du contrat Déclarant */
    private java.lang.String fondsDeclarant;
    /** Produit du contrat Déclarant */
    private java.lang.String produitDeclarant;
    /** Numéro du contrat du Délégant */
    private java.lang.String numeroContratDelegant;
    /** Fonds du contrat Délégant */
    private java.lang.String fondsDelegant;
    /** Produit du contrat Délégant */
    private java.lang.String produitDelegant;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nom)) {
        this.nom = data().deepCopy(fields()[1].schema(), other.nom);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dateDebut)) {
        this.dateDebut = data().deepCopy(fields()[2].schema(), other.dateDebut);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.dateFin)) {
        this.dateFin = data().deepCopy(fields()[3].schema(), other.dateFin);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.bcrTitulaire)) {
        this.bcrTitulaire = data().deepCopy(fields()[4].schema(), other.bcrTitulaire);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.natureDeclarant)) {
        this.natureDeclarant = data().deepCopy(fields()[5].schema(), other.natureDeclarant);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.categorie)) {
        this.categorie = data().deepCopy(fields()[6].schema(), other.categorie);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.numeroContratDeclarant)) {
        this.numeroContratDeclarant = data().deepCopy(fields()[7].schema(), other.numeroContratDeclarant);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.fondsDeclarant)) {
        this.fondsDeclarant = data().deepCopy(fields()[8].schema(), other.fondsDeclarant);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.produitDeclarant)) {
        this.produitDeclarant = data().deepCopy(fields()[9].schema(), other.produitDeclarant);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.numeroContratDelegant)) {
        this.numeroContratDelegant = data().deepCopy(fields()[10].schema(), other.numeroContratDelegant);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.fondsDelegant)) {
        this.fondsDelegant = data().deepCopy(fields()[11].schema(), other.fondsDelegant);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.produitDelegant)) {
        this.produitDelegant = data().deepCopy(fields()[12].schema(), other.produitDelegant);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing FormationCommandeValueDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nom)) {
        this.nom = data().deepCopy(fields()[1].schema(), other.nom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dateDebut)) {
        this.dateDebut = data().deepCopy(fields()[2].schema(), other.dateDebut);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dateFin)) {
        this.dateFin = data().deepCopy(fields()[3].schema(), other.dateFin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bcrTitulaire)) {
        this.bcrTitulaire = data().deepCopy(fields()[4].schema(), other.bcrTitulaire);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.natureDeclarant)) {
        this.natureDeclarant = data().deepCopy(fields()[5].schema(), other.natureDeclarant);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.categorie)) {
        this.categorie = data().deepCopy(fields()[6].schema(), other.categorie);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.numeroContratDeclarant)) {
        this.numeroContratDeclarant = data().deepCopy(fields()[7].schema(), other.numeroContratDeclarant);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fondsDeclarant)) {
        this.fondsDeclarant = data().deepCopy(fields()[8].schema(), other.fondsDeclarant);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.produitDeclarant)) {
        this.produitDeclarant = data().deepCopy(fields()[9].schema(), other.produitDeclarant);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.numeroContratDelegant)) {
        this.numeroContratDelegant = data().deepCopy(fields()[10].schema(), other.numeroContratDelegant);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.fondsDelegant)) {
        this.fondsDelegant = data().deepCopy(fields()[11].schema(), other.fondsDelegant);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.produitDelegant)) {
        this.produitDelegant = data().deepCopy(fields()[12].schema(), other.produitDelegant);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'source' field.
      * source de la commande
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * source de la commande
      * @param value The value of 'source'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setSource(java.lang.String value) {
      validate(fields()[0], value);
      this.source = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * source de la commande
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'source' field.
      * source de la commande
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearSource() {
      source = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nom' field.
      * Nom de la formation
      * @return The value.
      */
    public java.lang.String getNom() {
      return nom;
    }


    /**
      * Sets the value of the 'nom' field.
      * Nom de la formation
      * @param value The value of 'nom'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setNom(java.lang.String value) {
      validate(fields()[1], value);
      this.nom = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nom' field has been set.
      * Nom de la formation
      * @return True if the 'nom' field has been set, false otherwise.
      */
    public boolean hasNom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nom' field.
      * Nom de la formation
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearNom() {
      nom = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateDebut' field.
      * Date début
      * @return The value.
      */
    public java.time.LocalDate getDateDebut() {
      return dateDebut;
    }


    /**
      * Sets the value of the 'dateDebut' field.
      * Date début
      * @param value The value of 'dateDebut'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setDateDebut(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.dateDebut = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dateDebut' field has been set.
      * Date début
      * @return True if the 'dateDebut' field has been set, false otherwise.
      */
    public boolean hasDateDebut() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dateDebut' field.
      * Date début
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearDateDebut() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateFin' field.
      * Date de fin
      * @return The value.
      */
    public java.time.LocalDate getDateFin() {
      return dateFin;
    }


    /**
      * Sets the value of the 'dateFin' field.
      * Date de fin
      * @param value The value of 'dateFin'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setDateFin(java.time.LocalDate value) {
      validate(fields()[3], value);
      this.dateFin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dateFin' field has been set.
      * Date de fin
      * @return True if the 'dateFin' field has been set, false otherwise.
      */
    public boolean hasDateFin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dateFin' field.
      * Date de fin
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearDateFin() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bcrTitulaire' field.
      * BCR titulaire
      * @return The value.
      */
    public java.lang.String getBcrTitulaire() {
      return bcrTitulaire;
    }


    /**
      * Sets the value of the 'bcrTitulaire' field.
      * BCR titulaire
      * @param value The value of 'bcrTitulaire'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setBcrTitulaire(java.lang.String value) {
      validate(fields()[4], value);
      this.bcrTitulaire = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bcrTitulaire' field has been set.
      * BCR titulaire
      * @return True if the 'bcrTitulaire' field has been set, false otherwise.
      */
    public boolean hasBcrTitulaire() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bcrTitulaire' field.
      * BCR titulaire
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearBcrTitulaire() {
      bcrTitulaire = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'natureDeclarant' field.
      * Nature du déclarant de la formation
      * @return The value.
      */
    public java.lang.String getNatureDeclarant() {
      return natureDeclarant;
    }


    /**
      * Sets the value of the 'natureDeclarant' field.
      * Nature du déclarant de la formation
      * @param value The value of 'natureDeclarant'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setNatureDeclarant(java.lang.String value) {
      validate(fields()[5], value);
      this.natureDeclarant = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'natureDeclarant' field has been set.
      * Nature du déclarant de la formation
      * @return True if the 'natureDeclarant' field has been set, false otherwise.
      */
    public boolean hasNatureDeclarant() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'natureDeclarant' field.
      * Nature du déclarant de la formation
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearNatureDeclarant() {
      natureDeclarant = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'categorie' field.
      * Catégorie de la formation
      * @return The value.
      */
    public java.lang.String getCategorie() {
      return categorie;
    }


    /**
      * Sets the value of the 'categorie' field.
      * Catégorie de la formation
      * @param value The value of 'categorie'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setCategorie(java.lang.String value) {
      validate(fields()[6], value);
      this.categorie = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'categorie' field has been set.
      * Catégorie de la formation
      * @return True if the 'categorie' field has been set, false otherwise.
      */
    public boolean hasCategorie() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'categorie' field.
      * Catégorie de la formation
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearCategorie() {
      categorie = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'numeroContratDeclarant' field.
      * Numéro du contrat du Déclarant
      * @return The value.
      */
    public java.lang.String getNumeroContratDeclarant() {
      return numeroContratDeclarant;
    }


    /**
      * Sets the value of the 'numeroContratDeclarant' field.
      * Numéro du contrat du Déclarant
      * @param value The value of 'numeroContratDeclarant'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setNumeroContratDeclarant(java.lang.String value) {
      validate(fields()[7], value);
      this.numeroContratDeclarant = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'numeroContratDeclarant' field has been set.
      * Numéro du contrat du Déclarant
      * @return True if the 'numeroContratDeclarant' field has been set, false otherwise.
      */
    public boolean hasNumeroContratDeclarant() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'numeroContratDeclarant' field.
      * Numéro du contrat du Déclarant
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearNumeroContratDeclarant() {
      numeroContratDeclarant = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'fondsDeclarant' field.
      * Fonds du contrat Déclarant
      * @return The value.
      */
    public java.lang.String getFondsDeclarant() {
      return fondsDeclarant;
    }


    /**
      * Sets the value of the 'fondsDeclarant' field.
      * Fonds du contrat Déclarant
      * @param value The value of 'fondsDeclarant'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setFondsDeclarant(java.lang.String value) {
      validate(fields()[8], value);
      this.fondsDeclarant = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'fondsDeclarant' field has been set.
      * Fonds du contrat Déclarant
      * @return True if the 'fondsDeclarant' field has been set, false otherwise.
      */
    public boolean hasFondsDeclarant() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'fondsDeclarant' field.
      * Fonds du contrat Déclarant
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearFondsDeclarant() {
      fondsDeclarant = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'produitDeclarant' field.
      * Produit du contrat Déclarant
      * @return The value.
      */
    public java.lang.String getProduitDeclarant() {
      return produitDeclarant;
    }


    /**
      * Sets the value of the 'produitDeclarant' field.
      * Produit du contrat Déclarant
      * @param value The value of 'produitDeclarant'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setProduitDeclarant(java.lang.String value) {
      validate(fields()[9], value);
      this.produitDeclarant = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'produitDeclarant' field has been set.
      * Produit du contrat Déclarant
      * @return True if the 'produitDeclarant' field has been set, false otherwise.
      */
    public boolean hasProduitDeclarant() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'produitDeclarant' field.
      * Produit du contrat Déclarant
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearProduitDeclarant() {
      produitDeclarant = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'numeroContratDelegant' field.
      * Numéro du contrat du Délégant
      * @return The value.
      */
    public java.lang.String getNumeroContratDelegant() {
      return numeroContratDelegant;
    }


    /**
      * Sets the value of the 'numeroContratDelegant' field.
      * Numéro du contrat du Délégant
      * @param value The value of 'numeroContratDelegant'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setNumeroContratDelegant(java.lang.String value) {
      validate(fields()[10], value);
      this.numeroContratDelegant = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'numeroContratDelegant' field has been set.
      * Numéro du contrat du Délégant
      * @return True if the 'numeroContratDelegant' field has been set, false otherwise.
      */
    public boolean hasNumeroContratDelegant() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'numeroContratDelegant' field.
      * Numéro du contrat du Délégant
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearNumeroContratDelegant() {
      numeroContratDelegant = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'fondsDelegant' field.
      * Fonds du contrat Délégant
      * @return The value.
      */
    public java.lang.String getFondsDelegant() {
      return fondsDelegant;
    }


    /**
      * Sets the value of the 'fondsDelegant' field.
      * Fonds du contrat Délégant
      * @param value The value of 'fondsDelegant'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setFondsDelegant(java.lang.String value) {
      validate(fields()[11], value);
      this.fondsDelegant = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'fondsDelegant' field has been set.
      * Fonds du contrat Délégant
      * @return True if the 'fondsDelegant' field has been set, false otherwise.
      */
    public boolean hasFondsDelegant() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'fondsDelegant' field.
      * Fonds du contrat Délégant
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearFondsDelegant() {
      fondsDelegant = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'produitDelegant' field.
      * Produit du contrat Délégant
      * @return The value.
      */
    public java.lang.String getProduitDelegant() {
      return produitDelegant;
    }


    /**
      * Sets the value of the 'produitDelegant' field.
      * Produit du contrat Délégant
      * @param value The value of 'produitDelegant'.
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder setProduitDelegant(java.lang.String value) {
      validate(fields()[12], value);
      this.produitDelegant = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'produitDelegant' field has been set.
      * Produit du contrat Délégant
      * @return True if the 'produitDelegant' field has been set, false otherwise.
      */
    public boolean hasProduitDelegant() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'produitDelegant' field.
      * Produit du contrat Délégant
      * @return This builder.
      */
    public fr.icdc.dei.dfp.mcf.pc5.formation.avro.FormationCommandeValueDTO.Builder clearProduitDelegant() {
      produitDelegant = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FormationCommandeValueDTO build() {
      try {
        FormationCommandeValueDTO record = new FormationCommandeValueDTO();
        record.source = fieldSetFlags()[0] ? this.source : (java.lang.String) defaultValue(fields()[0]);
        record.nom = fieldSetFlags()[1] ? this.nom : (java.lang.String) defaultValue(fields()[1]);
        record.dateDebut = fieldSetFlags()[2] ? this.dateDebut : (java.time.LocalDate) defaultValue(fields()[2]);
        record.dateFin = fieldSetFlags()[3] ? this.dateFin : (java.time.LocalDate) defaultValue(fields()[3]);
        record.bcrTitulaire = fieldSetFlags()[4] ? this.bcrTitulaire : (java.lang.String) defaultValue(fields()[4]);
        record.natureDeclarant = fieldSetFlags()[5] ? this.natureDeclarant : (java.lang.String) defaultValue(fields()[5]);
        record.categorie = fieldSetFlags()[6] ? this.categorie : (java.lang.String) defaultValue(fields()[6]);
        record.numeroContratDeclarant = fieldSetFlags()[7] ? this.numeroContratDeclarant : (java.lang.String) defaultValue(fields()[7]);
        record.fondsDeclarant = fieldSetFlags()[8] ? this.fondsDeclarant : (java.lang.String) defaultValue(fields()[8]);
        record.produitDeclarant = fieldSetFlags()[9] ? this.produitDeclarant : (java.lang.String) defaultValue(fields()[9]);
        record.numeroContratDelegant = fieldSetFlags()[10] ? this.numeroContratDelegant : (java.lang.String) defaultValue(fields()[10]);
        record.fondsDelegant = fieldSetFlags()[11] ? this.fondsDelegant : (java.lang.String) defaultValue(fields()[11]);
        record.produitDelegant = fieldSetFlags()[12] ? this.produitDelegant : (java.lang.String) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FormationCommandeValueDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<FormationCommandeValueDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FormationCommandeValueDTO>
    READER$ = (org.apache.avro.io.DatumReader<FormationCommandeValueDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










